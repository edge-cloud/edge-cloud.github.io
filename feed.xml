<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.edge-cloud.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.edge-cloud.net/" rel="alternate" type="text/html" /><updated>2022-06-26T17:37:04-07:00</updated><id>https://www.edge-cloud.net/feed.xml</id><title type="html">Edge Cloud</title><subtitle>On the edge of cloud computing</subtitle><author><name>Christian Elsen</name></author><entry><title type="html">Freeradius with Let’s Encrypt certificate for WPA Enterprise (802.1x) WiFi setup</title><link href="https://www.edge-cloud.net/2019/04/30/freeradius-with-letsencrypt-for-wpa-enterprise/" rel="alternate" type="text/html" title="Freeradius with Let’s Encrypt certificate for WPA Enterprise (802.1x) WiFi setup" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2019/04/30/Freeradius-with-LetsEncrypt-for-WPA-Enterprise</id><content type="html" xml:base="https://www.edge-cloud.net/2019/04/30/freeradius-with-letsencrypt-for-wpa-enterprise/"><![CDATA[<p>Intro of what to accomplish</p>

<h1 id="setup">Setup</h1>

<h2 id="kerberos">Kerberos</h2>

<p><strong>/etc/krb5.conf</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# /etc/krb5.conf
#

[libdefaults]
 default_realm = DOMAIN.LOCAL

# EoF
</code></pre></div></div>

<h2 id="samba">Samba</h2>

<p><strong>/etc/samba/smb.conf</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# /etc/samba/smb.conf
#

# start of global variables
[global]

# server information, this is the domain/workgroup
workgroup = DOMAIN

# Kerberos / authentication information
realm = DOMAIN.LOCAL

# system hostname
netbios name = RADIUS1

# security used (Active Directory)
security = ADS

# EoF
</code></pre></div></div>

<p><strong>/etc/hosts</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1    radius1.domain.local radius1 localhost.localdomain localhost
</code></pre></div></div>

<h1 id="join-the-domain">Join the domain</h1>

<h1 id="lets-encrypt">Let’s Encrypt</h1>

<h1 id="freeradius">Freeradius</h1>

<h1 id="testing">Testing</h1>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><summary type="html"><![CDATA[Step-by-step guid to setup Freeradius 3.0 with Let's Encrypt certificates to implement a WPA Enterprise (802.1x) Wifi setup with EAP-TTLS for BYOD.]]></summary></entry><entry><title type="html">Hands-on with AWS Bring your own IP addresses (BYOIP) in Amazon EC2</title><link href="https://www.edge-cloud.net/2021/10/15/aws-dx-public-vid-for-s3-only/" rel="alternate" type="text/html" title="Hands-on with AWS Bring your own IP addresses (BYOIP) in Amazon EC2" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2021/10/15/aws-dx-public-vid-for-s3-only</id><content type="html" xml:base="https://www.edge-cloud.net/2021/10/15/aws-dx-public-vid-for-s3-only/"><![CDATA[<p>Intro of what to accomplish</p>

<h1 id="heading-1">Heading 1</h1>

<h2 id="heading-11">Heading 1.1</h2>

<p><strong>Bold</strong></p>

<p class="notice--info"><strong>Note:</strong> This is a notice box</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# Code
#

</code></pre></div></div>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetwork.png" title="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetwork-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-960.webp 960w, 

" sizes="4032px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetwork-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-960.png 960w, 

" sizes="4032px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetwork.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " />
</picture>
</a>



  <figcaption>Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS
</figcaption>

</figure>

\[Buffer (Mbit) = bandwidth (Mbit/s) × delay (s)\]]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><category term="IPv6" /><summary type="html"><![CDATA[Using AWS Bring your own IP addresses (BYOIP) in Amazon EC2 capability with a real life example of an IPv6 prefix, showing provisioning and troubleshooting steps.]]></summary></entry><entry><title type="html">AWS Direct Connect overview</title><link href="https://www.edge-cloud.net/2022/07/13/dx-overview/" rel="alternate" type="text/html" title="AWS Direct Connect overview" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2022/07/13/dx-overview</id><content type="html" xml:base="https://www.edge-cloud.net/2022/07/13/dx-overview/"><![CDATA[<p><a href="https://aws.amazon.com/directconnect/">AWS Direct Connect</a> (DX) makes it easy to establish a dedicated connection from an on-premises network to AWS. Using AWS Direct Connect, you can establish private connectivity between AWS and your data center, office, factory or collocated environment. A DX connection can reduce network costs, increase bandwidth throughput, and provide a more consistent network experience than internet-based connections.</p>

<p>This article will provide an overview of AWS Direct Connect, outlining the various elements, touch upon resiliency recommendations, connectivity options to on-premises and demystify the commercial workflow and associated costs.</p>

<h1 id="overview">Overview</h1>

<p>AWS Direct Connect provides direct physical connectivity to the AWS Network via 3rd party <a href="https://aws.amazon.com/directconnect/locations/">colocation facilities (DX locations)</a>, using a cross-connect between an AWS-owned device and either a customer or partner owned device (See figure 1).</p>

<figure class="">








<a href="/content/uploads/2022/07/DX-Physical.png" title="Figure 1: Direct Connect Overview " class="image-popup">
<picture>
  <source width="1128" type="image/webp" data-srcset="

    
    /content/resized/2022/07/DX-Physical-320.webp 320w, 

    
    /content/resized/2022/07/DX-Physical-384.webp 384w, 

    
    /content/resized/2022/07/DX-Physical-512.webp 512w, 

    
    /content/resized/2022/07/DX-Physical-683.webp 683w, 

    
    /content/resized/2022/07/DX-Physical-800.webp 800w, 

    
    /content/resized/2022/07/DX-Physical-960.webp 960w, 

 /content/uploads/2022/07/DX-Physical.webp 1128w" sizes="1128px" />
  <source width="1128" data-srcset="

    /content/resized/2022/07/DX-Physical-320.png 320w, 

    /content/resized/2022/07/DX-Physical-384.png 384w, 

    /content/resized/2022/07/DX-Physical-512.png 512w, 

    /content/resized/2022/07/DX-Physical-683.png 683w, 

    /content/resized/2022/07/DX-Physical-800.png 800w, 

    /content/resized/2022/07/DX-Physical-960.png 960w, 

 /content/uploads/2022/07/DX-Physical.png 1128w" sizes="1128px" />
  <img src="//:0" data-src="/content/uploads/2022/07/DX-Physical.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Direct Connect Overview " />
</picture>
</a>



  <figcaption>Figure 1: Direct Connect Overview
</figcaption>

</figure>

<p>These colocation facilities are not AWS data centers, but rather colocation facilities operated by 3rd part providers such as <a href="https://www.equinix.com/">Equinix</a>, <a href="https://www.coresite.com/">CoreSite</a>, <a href="https://cologix.com/">Cologix</a>, <a href="https://www.digitalrealty.com/">Digital Realty</a>, and others. A colocation data center, often referred to as a “colo”, is a large datacenter facility that rents out rack space to third parties for their servers or other network equipment. This is a very popular service that is used by businesses that may not have the resources needed to maintain their own data center, but still want to enjoy all the benefits. Or it is used by Network Service Providers to interconnect with partners - such as cloud providers - or customers.</p>

<h1 id="benefits">Benefits</h1>

<p>The benefits of using AWS Direct Connect over the open Internet can be categorized into:</p>

<ul>
  <li>
    <p><strong>Improved Performance and Reliability:</strong> Improve application performance by connecting directly to AWS and bypassing the public internet. Using DX typically reduces the number of network hops and therefore reduced latency.</p>
  </li>
  <li>
    <p><strong>Reduced costs:</strong> Reduced networking costs with low data transfer rates out of AWS compared to data egress fees over the Internet.</p>
  </li>
  <li>
    <p><strong>Increased security:</strong> Secure data as it moves between on-premises networks and AWS with multiple encryption options, such as MACsec (IEEE 802.1ae).</p>
  </li>
</ul>

<h1 id="elements">Elements</h1>

<p>An AWS Direct Connect consists of two elements: The physical connection and the logical virtual interfaces:</p>

<h2 id="physical-elements-connection">Physical Elements: Connection</h2>

<p>Three different connection options exist with “Dedicated Connections”, “Hosted Connections” and the legacy model of “Hosted Virtual Interfaces” - which is no longer available for new connections.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Dedicated Connections</th>
      <th>Hosted Connections</th>
      <th>Hosted Virtual Interfaces (Legacy)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>AWS asigned capacity</strong></td>
      <td>1 Gbps, 10 Gbps or 100 Gbps</td>
      <td>50 Mbps to 10 Gbps</td>
      <td>None</td>
    </tr>
    <tr>
      <td><strong>Private or Public Virtual Interfaces (VIFs)</strong></td>
      <td>50</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td><strong>Transit Virtual Interface (VIF)</strong></td>
      <td>1</td>
      <td>1 (if assigned capacity &gt;= 1 Gbps)</td>
      <td>None</td>
    </tr>
    <tr>
      <td><strong>Partner-only offering</strong></td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><strong>Covered under SLA</strong></td>
      <td>Yes</td>
      <td>No</td>
      <td>No</td>
    </tr>
    <tr>
      <td><strong>Supports MACsec (802.1ae)</strong></td>
      <td>Yes (10 Gbps or 100 Gbps at select locations)</td>
      <td>No</td>
      <td>No</td>
    </tr>
  </tbody>
</table>

<h3 id="dedicated-connection">Dedicated Connection</h3>

<p>In the case of a “Dedicated Connection”, the customer or partner is provided with a dedicated Ethernet over single-mode fiber, providing an 802.1q trunk (VLANs) via a cross-connect within a DX location. 
Customers can request a dedicated connection through the AWS Direct Connect console, the CLI, or the API. Each dedicated connection can provide 50 Private or Public Virtual Interfaces, as well as 1 Transit Virtual Interface.</p>

<p>As depicted in figure 1, the customer or partner will order the colo operator to create a cross-connect from a meet-me room to the customer’s or partner’s space - also somethimes called cage.</p>

<figure class="">








<a href="/content/uploads/2022/07/meet-me-room.jpg" title="Figure 2: Meet-me room in a colocation facility " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2022/07/meet-me-room-320.webp 320w, 

    
    /content/resized/2022/07/meet-me-room-384.webp 384w, 

    
    /content/resized/2022/07/meet-me-room-512.webp 512w, 

    
    /content/resized/2022/07/meet-me-room-683.webp 683w, 

    
    /content/resized/2022/07/meet-me-room-800.webp 800w, 

    
    /content/resized/2022/07/meet-me-room-960.webp 960w, 

" sizes="1920px" />
  <source data-srcset="

    /content/resized/2022/07/meet-me-room-320.jpg 320w, 

    /content/resized/2022/07/meet-me-room-384.jpg 384w, 

    /content/resized/2022/07/meet-me-room-512.jpg 512w, 

    /content/resized/2022/07/meet-me-room-683.jpg 683w, 

    /content/resized/2022/07/meet-me-room-800.jpg 800w, 

    /content/resized/2022/07/meet-me-room-960.jpg 960w, 

" sizes="1920px" />
  <img src="//:0" data-src="/content/uploads/2022/07/meet-me-room.jpg" class="blur-up lazyautosizes lazyload" alt="Figure 2: Meet-me room in a colocation facility " />
</picture>
</a>



  <figcaption>Figure 2: Meet-me room in a colocation facility
</figcaption>

</figure>

<p>A meet-me room is part of a colo that you will most likely never get to see in real life (See figure 2). It is a room where only authorized personell of the colo operator is allowed access to and where data connections are established between customers of the colo. To do so, one customer has to obtain a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) from the other customer - in this case AWS - and provide it to the colo operator. This LOA-CFA document specifies which pre-cabled connection is to be used for this particular customer.</p>

<p>The colo operator will then typically terminate the cross connect within the customer or partner space at the top of a particular rack in form of a patch panel (See Figure 3).</p>

<figure class="">








<a href="/content/uploads/2022/07/DX-Cross-Connect.png" title="Figure 3: Direct Connect Cross Connect within a customer’s rack " class="image-popup">
<picture>
  <source width="922" type="image/webp" data-srcset="

    
    /content/resized/2022/07/DX-Cross-Connect-320.webp 320w, 

    
    /content/resized/2022/07/DX-Cross-Connect-384.webp 384w, 

    
    /content/resized/2022/07/DX-Cross-Connect-512.webp 512w, 

    
    /content/resized/2022/07/DX-Cross-Connect-683.webp 683w, 

    
    /content/resized/2022/07/DX-Cross-Connect-800.webp 800w, 

 /content/uploads/2022/07/DX-Cross-Connect.webp 922w" sizes="922px" />
  <source width="922" data-srcset="

    /content/resized/2022/07/DX-Cross-Connect-320.png 320w, 

    /content/resized/2022/07/DX-Cross-Connect-384.png 384w, 

    /content/resized/2022/07/DX-Cross-Connect-512.png 512w, 

    /content/resized/2022/07/DX-Cross-Connect-683.png 683w, 

    /content/resized/2022/07/DX-Cross-Connect-800.png 800w, 

 /content/uploads/2022/07/DX-Cross-Connect.png 922w" sizes="922px" />
  <img src="//:0" data-src="/content/uploads/2022/07/DX-Cross-Connect.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Direct Connect Cross Connect within a customer’s rack " />
</picture>
</a>



  <figcaption>Figure 3: Direct Connect Cross Connect within a customer’s rack
</figcaption>

</figure>

<p>Depending on the chosen speed of the DX connection, different <a href="https://en.wikipedia.org/wiki/Optical_module">optical transceiver</a> are then used on the customer or partner side to terminate the DX connection on network equipment:</p>

<ul>
  <li>1 Gigabit Ethernet: 1000BASE-LX (1310 nm) transceiver</li>
  <li>10 Gigabit Ethernet: 10GBASE-LR (1310 nm) transceiver</li>
  <li>100 gigabit Ethernet: 100GBASE-LR4 transceiver</li>
</ul>

<p>Multiple Connectivity options between the cross connect termination point and the customer’s routers and workloads exist. Refer to the <a href="#connectivity">Connectivity</a> section below to find out more about these options</p>

<h3 id="hosted-connection">Hosted Connection</h3>

<p>A physical Ethernet connection that an AWS Direct Connect Partner provisions on behalf of a customer.  This connection type is not covered under the <a href="https://aws.amazon.com/directconnect/sla/">Direct Connect Service Level Agreement (SLA)</a>.</p>

<p>In the case of a Hosted Connection, the above described Dedicated Connection is operated by an <a href="https://aws.amazon.com/directconnect/partners/">AWS Direct Connect Delivery Partner</a> - often a Network Service Provider - which then maps multiple virtual connections to a single physical connection. 
Customers request a Hosted Connection by contacting the AWS Direct Connect Delivery Partner directly. A hosted connection can provide 1 Private Virtual Interface or 1 Public Virtual Interface or 1 Transit Virtual Interface (If the connection speed is 1 Gbps or higher).</p>

<p>These AWS Direct Connect Delivery Partners can also often offer network connectivity from an AWS Direct Connect location to an off-site location, such as an office building, factory or other data center. Therefore in such a scenario all equipment within the AWS Direct Connect location would be owned and operated by the AWS Direct Connect Delivery Partner and shared among multiple customers, usually resulting in lower operational cost and quicker initial implementation times.</p>

<p>In this case also multiple Connectivity options between the cross connect termination point on the partner’s equipment and the customer’s routers and workloads exist. Refer to the <a href="#connectivity">Connectivity</a> section below to find out more about these options</p>

<p>Note that this connection type is not covered under the AWS <a href="https://aws.amazon.com/directconnect/sla/">Direct Connect Service Level Agreement (SLA)</a>.</p>

<h3 id="hosted-virtual-interface-legacy">Hosted Virtual Interface (Legacy)</h3>

<p>This is a legacy offering which is no longer available for new provisioning by AWS Direct Connect Delivery Partners, but might still be found in use among existing customers. This connection type does not provide a dedicated bandwidth allocation on AWS side and is therefore at risk of oversubscription. It only provides 1 Private Virtual Interface or 1 Public Virtual Interface. No Transit Virtual Interface can be provided. This connection type is not covered under the <a href="https://aws.amazon.com/directconnect/sla/">Direct Connect Service Level Agreement (SLA)</a>.</p>

<h2 id="logical-elements-virtual-interfaces-vif">Logical Elements: Virtual Interfaces (VIF)</h2>

<p>A Direct Connect connection supports one or multiple Virtual Interfaces (VIF) as logical component. Refer to the above table to understand which DX connection type offers what kind and how many virtual interfaces.</p>

<figure class="">








<a href="/content/uploads/2022/07/DX-VIFs-Overview.png" title="Figure 4: Direct Connect Logical Overview " class="image-popup">
<picture>
  <source width="1060" type="image/webp" data-srcset="

    
    /content/resized/2022/07/DX-VIFs-Overview-320.webp 320w, 

    
    /content/resized/2022/07/DX-VIFs-Overview-384.webp 384w, 

    
    /content/resized/2022/07/DX-VIFs-Overview-512.webp 512w, 

    
    /content/resized/2022/07/DX-VIFs-Overview-683.webp 683w, 

    
    /content/resized/2022/07/DX-VIFs-Overview-800.webp 800w, 

    
    /content/resized/2022/07/DX-VIFs-Overview-960.webp 960w, 

 /content/uploads/2022/07/DX-VIFs-Overview.webp 1060w" sizes="1060px" />
  <source width="1060" data-srcset="

    /content/resized/2022/07/DX-VIFs-Overview-320.png 320w, 

    /content/resized/2022/07/DX-VIFs-Overview-384.png 384w, 

    /content/resized/2022/07/DX-VIFs-Overview-512.png 512w, 

    /content/resized/2022/07/DX-VIFs-Overview-683.png 683w, 

    /content/resized/2022/07/DX-VIFs-Overview-800.png 800w, 

    /content/resized/2022/07/DX-VIFs-Overview-960.png 960w, 

 /content/uploads/2022/07/DX-VIFs-Overview.png 1060w" sizes="1060px" />
  <img src="//:0" data-src="/content/uploads/2022/07/DX-VIFs-Overview.png" class="blur-up lazyautosizes lazyload" alt="Figure 4: Direct Connect Logical Overview " />
</picture>
</a>



  <figcaption>Figure 4: Direct Connect Logical Overview
</figcaption>

</figure>

<p>While each Virtual Interface serves a different purpose, they are all provided as an IEEE 802.1q VLAN over a trunk and require use of BGP via IPv4 and/or IPv6 (See Figure 4):</p>

<ul>
  <li><strong>Private virtual interface:</strong> Access an Amazon VPC using private IP addresses. Can be combined with a <a href="https://www.edge-cloud.net/2019/09/06/dx-gateway-deep-dive/">Direct Connect Gateway</a> to access VPCs outside the associated AWS region.</li>
  <li><strong>Public virtual interface:</strong> Access AWS services from your on-premises data center. Allow AWS services, or AWS customers access your public networks over the interface instead of traversing the internet. Does not leverage Direct Connect Gateways (DX-GW) or Virtual Private Gateways (VGW).</li>
  <li><strong>Transit virtual interface:</strong> Access one or more Amazon VPC Transit Gateways associated with Direct Connect Gateways (DX-GW). You can use transit virtual interfaces with 1/2/5/10/100 Gbps AWS Direct Connect connections. Use of a <a href="https://www.edge-cloud.net/2019/09/06/dx-gateway-deep-dive/">Direct Connect Gateway</a> is mandatory.</li>
</ul>

<h1 id="resiliency">Resiliency</h1>

<p>In order to achieve high resiliency, AWS recommends customers to follow the <a href="https://aws.amazon.com/directconnect/resiliency-recommendation/">AWS Direct Connect Resiliency Recommendations</a>. These recommendations outline three different topoly types that are mapped to the coresponding AWS <a href="https://aws.amazon.com/directconnect/sla/">Direct Connect Service Level Agreement (SLA)</a>:</p>

<ul>
  <li><strong>High Resiliency for Critical Workloads:</strong> 2x Direct Connect connections across 2x different Direct Connect locations</li>
  <li><strong>Maximum Resiliency for Critical Workloads:</strong> 4x Direct Connect connections across 2x different Direct Connect locations with 2x connections in each location.</li>
  <li><strong>Non-Critical Production Workloads or Development Workloads:</strong> 2x Direct Connect connections across a single Direct Connect locations</li>
</ul>

<p>Redundant Direct Connect connections are highly recommended as AWS need to perform regular <a href="https://aws.amazon.com/premiumsupport/knowledge-center/prepare-direct-connect-maintenance/">maintenance</a> on individual connections.</p>

<h1 id="connectivity">Connectivity</h1>

<p>Customers have multiple options to connect their own network equipment via a Direct Connect location (See Figure 5).</p>

<figure class="">








<a href="/content/uploads/2022/07/DX-Connectivity.png" title="Figure 5: Direct Connect Connectivity Options " class="image-popup">
<picture>
  <source width="821" type="image/webp" data-srcset="

    
    /content/resized/2022/07/DX-Connectivity-320.webp 320w, 

    
    /content/resized/2022/07/DX-Connectivity-384.webp 384w, 

    
    /content/resized/2022/07/DX-Connectivity-512.webp 512w, 

    
    /content/resized/2022/07/DX-Connectivity-683.webp 683w, 

    
    /content/resized/2022/07/DX-Connectivity-800.webp 800w, 

 /content/uploads/2022/07/DX-Connectivity.webp 821w" sizes="821px" />
  <source width="821" data-srcset="

    /content/resized/2022/07/DX-Connectivity-320.png 320w, 

    /content/resized/2022/07/DX-Connectivity-384.png 384w, 

    /content/resized/2022/07/DX-Connectivity-512.png 512w, 

    /content/resized/2022/07/DX-Connectivity-683.png 683w, 

    /content/resized/2022/07/DX-Connectivity-800.png 800w, 

 /content/uploads/2022/07/DX-Connectivity.png 821w" sizes="821px" />
  <img src="//:0" data-src="/content/uploads/2022/07/DX-Connectivity.png" class="blur-up lazyautosizes lazyload" alt="Figure 5: Direct Connect Connectivity Options " />
</picture>
</a>



  <figcaption>Figure 5: Direct Connect Connectivity Options
</figcaption>

</figure>

<ul>
  <li>
    <p><strong>In-location cross connect (Option 1):</strong> If the customer has resources deployed in the same colo facility as the DX location, the colo facility can provide a cross-connect between the AWS DX equipment and the customer resources. The customer has to provide a <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Letter of Authorization and Connecting Facility Assignment (LOA-CFA)</a> to the facility for this. This option is only available for Dedicated Connections.</p>
  </li>
  <li>
    <p><strong>Layer 2 circuit (Option 2):</strong> Customers can work with <a href="https://aws.amazon.com/directconnect/partners/">AWS Direct Connect Delivery Partners</a> to extend the AWS DX connection at Layer 2 (Data link layer) via a “circuit” from the DX location to the customer location. The router installed at the customer location will directly form a BGP session with the AWS equipment. Example technologies used are <a href="https://en.wikipedia.org/wiki/Metro_Ethernet">Metro Ethernet</a>, <a href="https://en.wikipedia.org/wiki/Dark_fibre">Dark fibre</a>, or <a href="https://en.wikipedia.org/wiki/Wavelength-division_multiplexing">Wavelength</a>. This option can be used with Dedicated Connections as well as Hosted Connections.</p>
  </li>
  <li>
    <p><strong>Layer 3 network (Option 3):</strong> Customers can work with <a href="https://aws.amazon.com/directconnect/partners/">AWS Direct Connect Delivery Partners</a> to extend the AWS DX connection at Layer 3 (Network layer) from the DX location to the customer location. In this case the the AWS Direct Connect Partner provides a router within the DX location that will form a BGP session with the AWS equipment. The DX partner then establishes another BGP with the customer, e.g. over an <a href="https://en.wikipedia.org/wiki/Multiprotocol_Label_Switching">MPLS</a>. This option can be used with Dedicated Connections as well as Hosted Connections.</p>
  </li>
</ul>

<p>If the customer is in a data center or colo facility that is not a DX location, it is best to check with that data center or colo facility for a list of preferred <a href="https://aws.amazon.com/directconnect/partners/">AWS Direct Connect Delivery Partners</a> that can provide DX connectivity into this particular data center or colo facility. Such “on-net” partners can typically provide connectivity faster.</p>

<h1 id="commercial-workflow">Commercial Workflow</h1>

<p>End-customers have a direct business relationship with AWS and are charged directly for all consumed <a href="https://aws.amazon.com/directconnect/pricing/">AWS services</a>. AWS Direct Connect is priced by AWS based on two criteria:</p>

<ul>
  <li><strong>Port hours:</strong> This is determined based on the capacity and the type of connection (It could be dedicated or hosted connection).</li>
  <li><strong>Outbound data transfer:</strong> The outbound charges are calculated for private virtual interfaces and transit virtual interfaces. This refers to the data which is transferred over the AWS Direct Connect in terms of GB. No additional charges are inferred when a multi-account Direct Connect gateway is used.</li>
</ul>

<p>In addition end-customers will need to engage with <a href="https://aws.amazon.com/directconnect/partners/">Direct Connect Delivery Partners</a> such as carriers, network service providers (NSP), or colocation providers to provide them with network connectivity to AWS. For this they will have a separate contract with this partner and the partner will invoice end-customers for the connectivity services they provide.</p>

<figure class="">








<a href="/content/uploads/2022/07/Direct-Connect-Commercial-Workflow.png" title="Figure 6: Commercial Workflow " class="image-popup">
<picture>
  <source width="637" type="image/webp" data-srcset="

    
    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-320.webp 320w, 

    
    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-384.webp 384w, 

    
    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-512.webp 512w, 

 /content/uploads/2022/07/Direct-Connect-Commercial-Workflow.webp 637w" sizes="637px" />
  <source width="637" data-srcset="

    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-320.png 320w, 

    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-384.png 384w, 

    /content/resized/2022/07/Direct-Connect-Commercial-Workflow-512.png 512w, 

 /content/uploads/2022/07/Direct-Connect-Commercial-Workflow.png 637w" sizes="637px" />
  <img src="//:0" data-src="/content/uploads/2022/07/Direct-Connect-Commercial-Workflow.png" class="blur-up lazyautosizes lazyload" alt="Figure 6: Commercial Workflow " />
</picture>
</a>



  <figcaption>Figure 6: Commercial Workflow
</figcaption>

</figure>

<h1 id="summary">Summary</h1>

<p>This article provided an overview of <a href="https://aws.amazon.com/directconnect/">AWS Direct Connect</a> (DX), including the physical element of Dedicated and Hosted Connections as well as the logical elements of Virtual Interfaces (VIF). It touched upoen resiliency recommendations, connectivity options between AWS Direct Connect locations and on-premises locations as well as demystified the commercial workflow and associated costs.</p>

<p>You should now be in a position to understand how AWS DX makes it easy to establish a dedicated connection from an on-premises network to AWS. Using AWS Direct Connect, you can establish private connectivity between AWS and your data center, office, factory or collocated environment. A DX connection can reduce network costs, increase bandwidth throughput, and provide a more consistent network experience than internet-based connections.</p>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><summary type="html"><![CDATA[Overview of AWS Direct Connect]]></summary></entry><entry><title type="html">Hands-on with AWS Bring your own IP addresses (BYOIP) in Amazon EC2</title><link href="https://www.edge-cloud.net/2021/10/01/hands-on-with-aws-byoip/" rel="alternate" type="text/html" title="Hands-on with AWS Bring your own IP addresses (BYOIP) in Amazon EC2" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2021/10/01/hands-on-with-aws-byoip</id><content type="html" xml:base="https://www.edge-cloud.net/2021/10/01/hands-on-with-aws-byoip/"><![CDATA[<p>This blog post will walk you through the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring your own IP addresses (BYOIP) for Amazon EC2</a>, using a real-life example. With BYOIP you can bring part or all of your publicly routable IPv4 or IPv6 address ranges to your AWS account. While you continue to own the address range, AWS advertises it on the internet for you under the Amazon <a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">Autonomous System Numbers (ASNs)</a>. Within your AWS account, these BYOIP address ranges appear as an <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">address pool</a>.</p>

<p>While <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/introducing-bring-your-own-ip-byoip-for-amazon-vpc/">other blog posts on AWS BYOIP</a> exist, they are usually completely theoretical and thereby hard to follow. In this blog post instead I will use real IPv6 address space, allowing you to validate the various steps through various publicly available databases and systems.</p>

<h1 id="benefits">Benefits</h1>

<p>You might wonder what the benefits of using BYOIP for Amazon EC2 is. They include among others:</p>

<ul>
  <li><strong>Trusted IP space:</strong> You might be using trusted IP space for your service, such as a transactional e-Mail service that requires a high reputation of IP space, or a VPN service.</li>
  <li><strong>Avoid blocking of IP space:</strong> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">AWS publishes its current IP address ranges in JSON format</a>, which makes it very easy for various content or service provider to block all of this address space. This often happens for unknown or unclear reasons. Address space used for BYOIP is not published via this JSON file.</li>
  <li><strong>Hard-coded IP addresses:</strong> There is a wide set of devices in the field that might be using hard-coded IP addresses to contact a service instead of relying on <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS</a>. Therefore when moving such a service to AWS, it is often necessary to move the corresponding IP address and its IP block along to AWS. Most frequently this proves easier than updating hundreds if not thousands of devices in the field.</li>
</ul>

<h1 id="requirements">Requirements</h1>

<p>While the AWS documentation lists various <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#byoip-requirements">requirements</a>, the statements on IP address “ownership” can be ignored. This is due  “ownership” being a quite fuzzy term when it comes to IP address space. A better term would be “control”, which we will use instead.</p>

<p>It’s widely recognized within the Internet community that you can demonstrate sufficient control over IP address space for the purpose of announcement from another ASN, by being able to create the corresponding Route Origin Authorization (ROA) record.</p>

<p>Later within the process you will see how you can demonstrate control over your IP space by creating the necessary ROA record. As of the writing of this article, doing so appears to be sufficient with the listed network types and allocation status being unverified.</p>

<h1 id="overall-process">Overall process</h1>

<p>The overall process to bring IPv4 or IPv6 address space to AWS via the BYOIP process consists of multiple steps and is outlined in figure 1.</p>

<figure class="">








<a href="/content/uploads/2021/10/BYOIP-AWS-Process.png" title="Figure 1: AWS Process to prepare and provison VPC BYOIP. " class="image-popup">
<picture>
  <source width="1030" type="image/webp" data-srcset="

    
    /content/resized/2021/10/BYOIP-AWS-Process-320.webp 320w, 

    
    /content/resized/2021/10/BYOIP-AWS-Process-384.webp 384w, 

    
    /content/resized/2021/10/BYOIP-AWS-Process-512.webp 512w, 

    
    /content/resized/2021/10/BYOIP-AWS-Process-683.webp 683w, 

    
    /content/resized/2021/10/BYOIP-AWS-Process-800.webp 800w, 

    
    /content/resized/2021/10/BYOIP-AWS-Process-960.webp 960w, 

 /content/uploads/2021/10/BYOIP-AWS-Process.webp 1030w" sizes="1030px" />
  <source width="1030" data-srcset="

    /content/resized/2021/10/BYOIP-AWS-Process-320.png 320w, 

    /content/resized/2021/10/BYOIP-AWS-Process-384.png 384w, 

    /content/resized/2021/10/BYOIP-AWS-Process-512.png 512w, 

    /content/resized/2021/10/BYOIP-AWS-Process-683.png 683w, 

    /content/resized/2021/10/BYOIP-AWS-Process-800.png 800w, 

    /content/resized/2021/10/BYOIP-AWS-Process-960.png 960w, 

 /content/uploads/2021/10/BYOIP-AWS-Process.png 1030w" sizes="1030px" />
  <img src="//:0" data-src="/content/uploads/2021/10/BYOIP-AWS-Process.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: AWS Process to prepare and provison VPC BYOIP. " />
</picture>
</a>



  <figcaption>Figure 1: AWS Process to prepare and provison VPC BYOIP.
</figcaption>

</figure>

<ul>
  <li>
    <p><strong>Step 1: Configuration of IP address space via your RIR/LIR</strong> - This includes creating appropriate RIR Resource DB records (aka. “Allocation” in the case of RIPE), as well as a Route Origin Authorization (ROA) record. While this step is necessary for BYOIP, it also represents good hygiene when using IP address space in general.</p>
  </li>
  <li>
    <p><strong>Step 2: Preparation of Self-signed X.509 certificates</strong> - While ROA is used to demonstrate control over the IP address space, it cannot be used to match a particular IP space to a certain AWS account ID. This is done via steps 2 - 5, whereas Step 2 generates a self-signed X.509 certificate pair for later usage.</p>
  </li>
  <li>
    <p><strong>Step 3: Uploading the public key to the RIR Resource DB (RDAP record)</strong> - Placing the public key portion of the self-signed X.509 certificate into the description field of the IP address space’s RDAP record allows AWS to validate the mapping of the corresponding address space to an AWS account. This approach assumes that only someone with control over the IP address space can make changes to the corresponding RIR Resource DB record.</p>
  </li>
  <li>
    <p><strong>Step 4: Creating a signed message</strong> - In this step you tie the IP address space to a certain AWS account ID. This is done by creating a signed message that by itself creates information about the IP address space and the AWS account ID and is signed using the above mentioned self-signed X.509 certificates.</p>
  </li>
  <li>
    <p><strong>Step 5: Provision address</strong> - The signed message from step 4 is used to request the provisioning of the IP address space within AWS VPC. AWS validates the request against the RIR Resources DB and the RPKI publication point to ensure that you have sufficient control over the space.</p>
  </li>
</ul>

<h1 id="rirlir-configuration">RIR/LIR Configuration</h1>

<p>In this blog post I will use IPv6 space allocated by my LIR <a href="https://snapserv.net/">SnapServ</a> from the Regional Internet Registry (RIR) <a href="https://www.ripe.net/">RIPE NCC</a>.</p>

<p>RIPE policy ((IPv4)[https://www.ripe.net/publications/docs/ripe-733], (IPv6)[https://www.ripe.net/publications/docs/ripe-738]) states that any IP address sub-block that is used in a different network must be sub-allocated by the RIR or assigned by the end-user within the RIPE database.</p>

<p>For this particular example we will focus on the red circle in Figure 2: As</p>

<figure class="">








<a href="/content/uploads/2021/10/BYOIP-RIPE-Assignment.png" title="Figure 2: RIPE Assignment for IPv4 and IPv6 address space with example highlighted in red. " class="image-popup">
<picture>
  <source width="1131" type="image/webp" data-srcset="

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-320.webp 320w, 

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-384.webp 384w, 

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-512.webp 512w, 

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-683.webp 683w, 

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-800.webp 800w, 

    
    /content/resized/2021/10/BYOIP-RIPE-Assignment-960.webp 960w, 

 /content/uploads/2021/10/BYOIP-RIPE-Assignment.webp 1131w" sizes="1131px" />
  <source width="1131" data-srcset="

    /content/resized/2021/10/BYOIP-RIPE-Assignment-320.png 320w, 

    /content/resized/2021/10/BYOIP-RIPE-Assignment-384.png 384w, 

    /content/resized/2021/10/BYOIP-RIPE-Assignment-512.png 512w, 

    /content/resized/2021/10/BYOIP-RIPE-Assignment-683.png 683w, 

    /content/resized/2021/10/BYOIP-RIPE-Assignment-800.png 800w, 

    /content/resized/2021/10/BYOIP-RIPE-Assignment-960.png 960w, 

 /content/uploads/2021/10/BYOIP-RIPE-Assignment.png 1131w" sizes="1131px" />
  <img src="//:0" data-src="/content/uploads/2021/10/BYOIP-RIPE-Assignment.png" class="blur-up lazyautosizes lazyload" alt="Figure 2: RIPE Assignment for IPv4 and IPv6 address space with example highlighted in red. " />
</picture>
</a>



  <figcaption>Figure 2: RIPE Assignment for IPv4 and IPv6 address space with example highlighted in red.
</figcaption>

</figure>

<p>https://apps.db.ripe.net/db-web-ui/lookup?source=ripe&amp;key=2a06:e881:7300::%2F40&amp;type=inet6num</p>

<p>https://apps.db.ripe.net/db-web-ui/lookup?source=ripe&amp;key=2a06:e881:73ff::%2F48&amp;type=inet6num</p>

<h2 id="assignment">Assignment</h2>

<h2 id="resource-public-key-infrastructure-rpki">Resource Public Key Infrastructure (RPKI)</h2>

<h1 id="aws-preparation">AWS Preparation</h1>

<h1 id="aws-configuration">AWS Configuration</h1>

<h1 id="validation">Validation</h1>

<p>https://rpki.cloudflare.com/?view=explorer&amp;prefix=2a06%3Ae881%3A7300%3A%3A%2F40&amp;prefixMatch=lspec</p>

<p>https://rpki.cloudflare.com/?view=explorer&amp;prefix=2a06%3Ae881%3A73ff%3A%3A%2F48&amp;prefixMatch=mspec</p>

<p><strong>Bold</strong></p>

<p class="notice--info"><strong>Note:</strong> This is a notice box</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# Code
#

</code></pre></div></div>

<figure class="">








<a href="/content/uploads/2021/10/BYOIP-AWS-VPC-Pool.png" title="Figure 3: Resulting IPv6 pool within a VPC. " class="image-popup">
<picture>
  <source width="603" type="image/webp" data-srcset="

    
    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-320.webp 320w, 

    
    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-384.webp 384w, 

    
    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-512.webp 512w, 

 /content/uploads/2021/10/BYOIP-AWS-VPC-Pool.webp 603w" sizes="603px" />
  <source width="603" data-srcset="

    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-320.png 320w, 

    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-384.png 384w, 

    /content/resized/2021/10/BYOIP-AWS-VPC-Pool-512.png 512w, 

 /content/uploads/2021/10/BYOIP-AWS-VPC-Pool.png 603w" sizes="603px" />
  <img src="//:0" data-src="/content/uploads/2021/10/BYOIP-AWS-VPC-Pool.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Resulting IPv6 pool within a VPC. " />
</picture>
</a>



  <figcaption>Figure 3: Resulting IPv6 pool within a VPC.
</figcaption>

</figure>

\[Buffer (Mbit) = bandwidth (Mbit/s) × delay (s)\]]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><category term="IPv6" /><summary type="html"><![CDATA[Using AWS Bring your own IP addresses (BYOIP) in Amazon EC2 capability with a real life example of an IPv6 prefix, showing provisioning and troubleshooting steps.]]></summary></entry><entry><title type="html">Securing your AWS networks</title><link href="https://www.edge-cloud.net/2020/01/03/securing-your-aws-network/" rel="alternate" type="text/html" title="Securing your AWS networks" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2020/01/03/securing-your-aws-networks</id><content type="html" xml:base="https://www.edge-cloud.net/2020/01/03/securing-your-aws-network/"><![CDATA[<p>Intro of what to accomplish</p>

<h1 id="scope">Scope</h1>

<h2 id="aws-well-architected---security-pillar">AWS Well Architected - Security Pillar</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetwork.png" title="Figure 1: Protecting network and host-level boundaries " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetwork-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-960.webp 960w, 

" sizes="4032px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetwork-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-960.png 960w, 

" sizes="4032px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetwork.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Protecting network and host-level boundaries " />
</picture>
</a>



  <figcaption>Figure 1: Protecting network and host-level boundaries
</figcaption>

</figure>

<h1 id="toolbox-for-securing-aws-networks">Toolbox for securing AWS networks</h1>

<h2 id="amazon-vpc-security-groups">Amazon VPC Security Groups</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-SecurityGroups.png" title="Figure 2: Security Groups " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-960.webp 960w, 

" sizes="3225px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-SecurityGroups-960.png 960w, 

" sizes="3225px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-SecurityGroups.png" class="blur-up lazyautosizes lazyload" alt="Figure 2: Security Groups " />
</picture>
</a>



  <figcaption>Figure 2: Security Groups
</figcaption>

</figure>

<h2 id="amazon-vpc-network-acls-access-control-lists">Amazon VPC Network ACLs (Access Control Lists)</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-NetworkACLs.png" title="Figure 3: Network Access Control Lists (ACLs) " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-960.webp 960w, 

" sizes="3025px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-NetworkACLs-960.png 960w, 

" sizes="3025px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-NetworkACLs.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Network Access Control Lists (ACLs) " />
</picture>
</a>



  <figcaption>Figure 3: Network Access Control Lists (ACLs)
</figcaption>

</figure>

<h2 id="aws-waf-web-application-firewall">AWS WAF (Web Application Firewall)</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-WAF.png" title="Figure 4: Web Application Firewalls (WAF) " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-960.webp 960w, 

" sizes="3560px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-WAF-960.png 960w, 

" sizes="3560px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-WAF.png" class="blur-up lazyautosizes lazyload" alt="Figure 4: Web Application Firewalls (WAF) " />
</picture>
</a>



  <figcaption>Figure 4: Web Application Firewalls (WAF)
</figcaption>

</figure>

<h2 id="aws-firewall-manager">AWS Firewall Manager</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-FirewallManager.png" title="Figure 5: Firewall Manager " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-960.webp 960w, 

" sizes="2400px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-FirewallManager-960.png 960w, 

" sizes="2400px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-FirewallManager.png" class="blur-up lazyautosizes lazyload" alt="Figure 5: Firewall Manager " />
</picture>
</a>



  <figcaption>Figure 5: Firewall Manager
</figcaption>

</figure>

<h2 id="aws-shield">AWS Shield</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-Shield.png" title="Figure 6: AWS Shield " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-960.webp 960w, 

" sizes="2635px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-Shield-960.png 960w, 

" sizes="2635px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-Shield.png" class="blur-up lazyautosizes lazyload" alt="Figure 6: AWS Shield " />
</picture>
</a>



  <figcaption>Figure 6: AWS Shield
</figcaption>

</figure>

<h2 id="aws-transit-gateway-with-3rd-party-firewall-solutions">AWS Transit Gateway with 3rd party firewall solutions</h2>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-TGW.png" title="Figure 7: Transit Gateway " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-960.webp 960w, 

" sizes="3469px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-TGW-960.png 960w, 

" sizes="3469px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-TGW.png" class="blur-up lazyautosizes lazyload" alt="Figure 7: Transit Gateway " />
</picture>
</a>



  <figcaption>Figure 7: Transit Gateway
</figcaption>

</figure>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetworks-PAN.png" title="Figure 7: Transit Gateway with Palo Alto Networks Integration " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-960.webp 960w, 

" sizes="2466px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetworks-PAN-960.png 960w, 

" sizes="2466px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetworks-PAN.png" class="blur-up lazyautosizes lazyload" alt="Figure 7: Transit Gateway with Palo Alto Networks Integration " />
</picture>
</a>



  <figcaption>Figure 7: Transit Gateway with Palo Alto Networks Integration
</figcaption>

</figure>

<h2 id="aws-ingress-routing-with-3rd-party-firewall-solutions">AWS Ingress Routing with 3rd party firewall solutions</h2>

<p><strong>Bold</strong></p>

<p class="notice--info"><strong>Note:</strong> This is a notice box</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# Code
#

</code></pre></div></div>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><summary type="html"><![CDATA[Brief description goes here]]></summary></entry><entry><title type="html">Title goes here</title><link href="https://www.edge-cloud.net/2021/01/01/template/" rel="alternate" type="text/html" title="Title goes here" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2021/01/01/template</id><content type="html" xml:base="https://www.edge-cloud.net/2021/01/01/template/"><![CDATA[<p>Intro of what to accomplish</p>

<h1 id="heading-1">Heading 1</h1>

<h2 id="heading-11">Heading 1.1</h2>

<p><strong>Bold</strong></p>

<p class="notice--info"><strong>Note:</strong> This is a notice box</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# Code
#

</code></pre></div></div>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetwork.png" title="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetwork-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-960.webp 960w, 

" sizes="4032px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetwork-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-960.png 960w, 

" sizes="4032px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetwork.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " />
</picture>
</a>



  <figcaption>Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS
</figcaption>

</figure>

\[Buffer (Mbit) = bandwidth (Mbit/s) × delay (s)\]]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><summary type="html"><![CDATA[Brief description goes here]]></summary></entry><entry><title type="html">Title goes here</title><link href="https://www.edge-cloud.net/2021/01/01/tgw-ngw-cost-breakeven/" rel="alternate" type="text/html" title="Title goes here" /><published>2022-06-26T17:36:19-07:00</published><updated>2022-06-26T17:36:19-07:00</updated><id>https://www.edge-cloud.net/2021/01/01/tgw-ngw-cost-breakeven</id><content type="html" xml:base="https://www.edge-cloud.net/2021/01/01/tgw-ngw-cost-breakeven/"><![CDATA[<p>Intro of what to accomplish</p>

<h1 id="heading-1">Heading 1</h1>

<h2 id="heading-11">Heading 1.1</h2>

<p><strong>Bold</strong></p>

<p class="notice--info"><strong>Note:</strong> This is a notice box</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# Code
#

</code></pre></div></div>

<figure class="">








<a href="/content/uploads/2020/01/SecuringYourAWSNetwork.png" title="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/01/SecuringYourAWSNetwork-320.webp 320w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-384.webp 384w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-512.webp 512w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-683.webp 683w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-800.webp 800w, 

    
    /content/resized/2020/01/SecuringYourAWSNetwork-960.webp 960w, 

" sizes="4032px" />
  <source data-srcset="

    /content/resized/2020/01/SecuringYourAWSNetwork-320.png 320w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-384.png 384w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-512.png 512w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-683.png 683w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-800.png 800w, 

    /content/resized/2020/01/SecuringYourAWSNetwork-960.png 960w, 

" sizes="4032px" />
  <img src="//:0" data-src="/content/uploads/2020/01/SecuringYourAWSNetwork.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS " />
</picture>
</a>



  <figcaption>Figure 1: Setup Overview of EC2-based VPN endpoint for Site-to-Site VPN with AWS
</figcaption>

</figure>

\[Price_{NGW}=( 720 hr / month \cdot Num_{VPC} \cdot Cost_{NGW-Attachment} ) + (traffic \cdot Cost_{NGW-Traffic})\]

\[Price_{TGW+NGW}=
  ( 720 hr / month \cdot Num_{VPC} \cdot Cost_{TGW-Attachment} ) + \\
  ( 720 hr / month \cdot Num_{AZ} \cdot Cost_{NGW-Attachment} ) + \\
  (traffic \cdot ( Cost_{TGW-Traffic} + Cost_{NGW-Traffic}))\]

\[Price_{TGW+NGW} \leq Price_{NGW}\]

\[( 720 hr / month \cdot Num_{VPC} \cdot Cost_{TGW-Attachment} ) + \\
  ( 720 hr / month \cdot Num_{AZ} \cdot Cost_{NGW-Attachment} ) + \\
  (traffic \cdot ( Cost_{TGW-Traffic} + Cost_{NGW-Traffic})) \\
  \leq ( 720 hr / month \cdot Num_{VPC} \cdot Cost_{NGW-Attachment} ) + (traffic \cdot Cost_{NGW-Traffic})\]

\[traffic \cdot Cost_{TGW-Traffic} +  traffic \cdot Cost_{NGW-Traffic} - traffic \cdot Cost_{NGW-Traffic} \\
  \leq ( 720 hr / month \cdot Num_{VPC} \cdot Cost_{NGW-Attachment} ) - \\
  ( 720 hr / month \cdot Num_{VPC} \cdot Cost_{TGW-Attachment} ) - \\
  ( 720 hr / month \cdot Num_{AZ} \cdot Cost_{NGW-Attachment} )\]

\[traffic \cdot Cost_{TGW-Traffic} \\
  \leq 720 hr / month \cdot (( Num_{VPC} \cdot Num_{AZ} \cdot Cost_{NGW-Attachment} ) \\
  - ( Num_{VPC} \cdot Cost_{TGW-Attachment} ) - ( Num_{AZ} \cdot Cost_{NGW-Attachment} ))\]

\[traffic \leq \frac{720 hr / month}{Cost_{TGW-Traffic}} \cdot \\
  (( Num_{VPC} \cdot Num_{AZ} \cdot Cost_{NGW-Attachment} ) - \\
  ( Num_{VPC} \cdot Cost_{TGW-Attachment} ) - ( Num_{AZ} \cdot Cost_{NGW-Attachment} ))\]]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><summary type="html"><![CDATA[Brief description goes here]]></summary></entry><entry><title type="html">Better understanding BGP</title><link href="https://www.edge-cloud.net/2020/09/28/understanding-bgp/" rel="alternate" type="text/html" title="Better understanding BGP" /><published>2020-09-28T00:00:00-07:00</published><updated>2020-09-28T00:00:00-07:00</updated><id>https://www.edge-cloud.net/2020/09/28/understanding-bgp</id><content type="html" xml:base="https://www.edge-cloud.net/2020/09/28/understanding-bgp/"><![CDATA[<p>In a <a href="https://www.edge-cloud.net/2020/09/18/understanding-routing/">previous post</a> we took a look at some of the fundamental principles of IP routing. Today we want to look at some more details of related BGP Routing protocol concepts. While these principles and concepts are generic, we will again use examples based on AWS networking, along with examples from running an <a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">Autonomous System</a> on the Internet.</p>

<p>This blog post is not intended to be an all encompassing primer on BGP. Instead I’ve seen numerous people confused by some of these principles and concepts while either designing networks or troubleshooting them. Therefore it appears to be a good idea to select and explain them explicitly.</p>

<h1 id="routing-protocols">Routing Protocols</h1>

<p>A <a href="https://en.wikipedia.org/wiki/Routing_protocol">Routing Protocol</a> specifies how routers communicate with each other to exchange information about the network and as a result populate and update the local route tables. While there are many different routing protocols, they all fall into the categories of either Interior gateway protocols or Exterior gateway protocols. <a href="https://en.wikipedia.org/wiki/Interior_gateway_protocol">Interior gateway protocols (IGPs)</a>, such as e.g. <a href="https://en.wikipedia.org/wiki/Open_Shortest_Path_First">OSPF</a>, <a href="https://en.wikipedia.org/wiki/Routing_Information_Protocol">RIP</a>, or <a href="https://en.wikipedia.org/wiki/IS-IS">IS-IS</a>, exchange routing information within a single routing domain, thereby under the control of a single administration. <a href="https://en.wikipedia.org/wiki/Exterior_gateway_protocol">Exterior gateway protocols (EGP)</a>, such as e.g. <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP</a> exchange routing information between autonomous systems.</p>

<h1 id="bgp">BGP</h1>

<p>Border Gateway Protocol (BGP) is an <a href="https://en.wikipedia.org/wiki/Exterior_gateway_protocol">Exterior gateway protocols (EGP)</a> designed to exchange routing and reachability information across Autonomous Systems (AS) on an Internet scale. It can be used for routing within an autonomous system, which is called Interior Border Gateway Protocol /  Internal BGP (iBGP). Or it can be used - as on the Internet - to route between AS, which is called Exterior Border Gateway Protocol / External BGP (eBGP). Here we will focus on the eBGP use case.</p>

<h1 id="bgp-best-path-selection-algorithm">BGP Best Path Selection Algorithm</h1>

<p>Within BGP the <a href="https://www.noction.com/blog/bgp-best-path-selection-algorithm">Best Path Selection Algorithm</a> is used to select the best route, which is then installed into the local route table. As the Internet route table - used in the <a href="https://en.wikipedia.org/wiki/Default-free_zone">Default Free Zone</a> - holds approximately 850,000 IPv4 and 95,000 IPv6 routes as of today and because some of these routes might be received from multiple peer - e.g. Transit Provider and direct peering, this selection is no easy task.
Unless the default settings within a BGP enabled router are changed, the Best Path Selection Algorithm selects the shortest path as the best path, where shortest path means the least amount of AS in the path.</p>

<p>In the following we want to look in more detail at the three most important selection criteria within the BGP Best Path Selection Algorithm:</p>
<ul>
  <li><strong>Local Preference</strong> or often “Local_Pref” for short is the second criteria that is considered. The default Local_Pref is 100 and routes with a higher local preference are preferred.</li>
  <li><strong>AS_PATH</strong> is the fourth criteria considered. Routes with the shortest AS_PATH attribute are preferred.</li>
  <li><strong>Multi-exit discriminator (MED)</strong> is the sixth selection criteria considered. Here routes with a lower MED value are preferred with 0 being the default value.</li>
</ul>

<h2 id="local_pref">Local_Pref</h2>

<p>As previously seen, Local_Pref is one of the first Best Path Selection Algorithm criteria that a router looks at. It is evaluated before the AS path length. While the default value of Local_Pref is 100, routes that have a higher Local_Pref value are preferred. An important characteristic to consider is that Local_Pref is local in the sense that the attribute is only propagated over iBGP sessions (within your AS) and not over eBGP sessions (to external ASes). You might see BGP route tables with empty entries for Local_Pref for a given route, sometimes along with other routes that do have an explicit entry. In this case the empty entries just mean that the deafult value of 100 applies.</p>

<p>In practice Local_Pref can be used to specify how traffic should leave our AS, therefore it can guide the exit path (See Figure 1). Here ASN 1 prefers the path to ASN2, as the Local_Pref on the corresponding interface has a higher value.</p>

<figure class="">








<a href="/content/uploads/2020/09/Understanding-BGP-Local_Pref.png" title="Figure 1: Local_Pref dictates how traffic leaves a local ASN, where path with a higher Local_Pref value being preferred. " class="image-popup">
<picture>
  <source width="521" type="image/webp" data-srcset="

    
    /content/resized/2020/09/Understanding-BGP-Local_Pref-320.webp 320w, 

    
    /content/resized/2020/09/Understanding-BGP-Local_Pref-384.webp 384w, 

    
    /content/resized/2020/09/Understanding-BGP-Local_Pref-512.webp 512w, 

 /content/uploads/2020/09/Understanding-BGP-Local_Pref.webp 521w" sizes="521px" />
  <source width="521" data-srcset="

    /content/resized/2020/09/Understanding-BGP-Local_Pref-320.png 320w, 

    /content/resized/2020/09/Understanding-BGP-Local_Pref-384.png 384w, 

    /content/resized/2020/09/Understanding-BGP-Local_Pref-512.png 512w, 

 /content/uploads/2020/09/Understanding-BGP-Local_Pref.png 521w" sizes="521px" />
  <img src="//:0" data-src="/content/uploads/2020/09/Understanding-BGP-Local_Pref.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: Local_Pref dictates how traffic leaves a local ASN, where path with a higher Local_Pref value being preferred. " />
</picture>
</a>



  <figcaption>Figure 1: Local_Pref dictates how traffic leaves a local ASN, where path with a higher Local_Pref value being preferred.
</figcaption>

</figure>

<p>This is typically used for traffic engineering purposes, where an ASN wants to prefer a certain kind of peer over another. Usually this is done for financial reasons, as traffic exchanged over e.g. a Transit peering might incur cost, while traffic exchanged over a direct peering might be settlement free.</p>

<p>As a result a typical mapping of BGP session types to Local_Pref values could look like this:</p>

<table>
  <thead>
    <tr>
      <th>BGP Session</th>
      <th>Local_Pref</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Private Peering</strong></td>
      <td>500</td>
    </tr>
    <tr>
      <td><strong>Direct Peering via IXP</strong></td>
      <td>400</td>
    </tr>
    <tr>
      <td><strong>Peering via IXP Route Server</strong></td>
      <td>300</td>
    </tr>
    <tr>
      <td><strong>Transit</strong></td>
      <td>200</td>
    </tr>
  </tbody>
</table>

<p>Here we generally prefer settlement-free peering with higher Local_Pref over paid transit with lower Local_Pref.</p>

<h2 id="as_path-length">AS_PATH length</h2>

<p>A common mechanism to manage traffic across AS with BGP is to make a BGP AS_PATH longer via <a href="https://www.noction.com/blog/as-path-and-as-path-prepending">AS path prepending</a>. Prepending means adding one or more AS numbers to the left side of the AS path. Normally this is done using one’s own AS number, while announcing routes to another AS.</p>

<p>With that we can influence how traffic will reach our ASN. Similar to what I described before we might not only have a commercial interest in reducing the cost that we pay for Transit for traffic leaving our ASN, but also for traffic entering our ASN. We have seen that we can perform traffic engineering for egress traffic via Local_Pref, using AS path prepending can be used for traffic engineering on ingress traffic (See Figure 2). Here ASN 1 makes its path artificially longer towards ASN 3 by prepending its own ASN once.</p>

<figure class="">








<a href="/content/uploads/2020/09/Understanding-BGP-AS-Path-Prepending.png" title="Figure 2: AS_PATH prepending makes the AS path length artificially longer, therefore influencing inbound traffic to an ASN. " class="image-popup">
<picture>
  <source width="521" type="image/webp" data-srcset="

    
    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-320.webp 320w, 

    
    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-384.webp 384w, 

    
    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-512.webp 512w, 

 /content/uploads/2020/09/Understanding-BGP-AS-Path-Prepending.webp 521w" sizes="521px" />
  <source width="521" data-srcset="

    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-320.png 320w, 

    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-384.png 384w, 

    /content/resized/2020/09/Understanding-BGP-AS-Path-Prepending-512.png 512w, 

 /content/uploads/2020/09/Understanding-BGP-AS-Path-Prepending.png 521w" sizes="521px" />
  <img src="//:0" data-src="/content/uploads/2020/09/Understanding-BGP-AS-Path-Prepending.png" class="blur-up lazyautosizes lazyload" alt="Figure 2: AS_PATH prepending makes the AS path length artificially longer, therefore influencing inbound traffic to an ASN. " />
</picture>
</a>



  <figcaption>Figure 2: AS_PATH prepending makes the AS path length artificially longer, therefore influencing inbound traffic to an ASN.
</figcaption>

</figure>

<p>With this we could use AS path prepending for IP prefixes originated or announced by our ASN over various types of BGP session types like this to optimize for cost:</p>

<table>
  <thead>
    <tr>
      <th>BGP Session</th>
      <th>AS path prepending</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Private Peering</strong></td>
      <td>None</td>
    </tr>
    <tr>
      <td><strong>Direct Peering via IXP</strong></td>
      <td>1x</td>
    </tr>
    <tr>
      <td><strong>Peering via IXP Route Server</strong></td>
      <td>2x</td>
    </tr>
    <tr>
      <td><strong>Transit</strong></td>
      <td>3x</td>
    </tr>
  </tbody>
</table>

<p>In this case we tell other ASNs to prefer path via our settlement-free peering through lower AS_PATH length over paid transit through longer AS_PATH length.</p>

<h2 id="multi-exit-discriminator-med">Multi-Exit Discriminator (MED)</h2>

<p>Multi-Exit Discriminator (MED) is used for the case that more than one link between two ASN exists. I can be used to influence which of these links is then used (See Figure 3). It is important to point out that the MED value is not transitive. Therefore it is not passed on by the receiving AS and therefore can solely be used to influence traffic between directly neighboring AS.</p>

<p>In this case traffic from the neighboring ASN 2 will ingress via device R1 as the MED on the corresponding link is lower.</p>

<figure class="">








<a href="/content/uploads/2020/09/Understanding-BGP-MED.png" title="Figure 3: Multi-Exit Discriminator (MED) suggests how traffic should enter an ASN. Path with lower MED value are preferred. " class="image-popup">
<picture>
  <source width="381" type="image/webp" data-srcset="

    
    /content/resized/2020/09/Understanding-BGP-MED-320.webp 320w, 

 /content/uploads/2020/09/Understanding-BGP-MED.webp 381w" sizes="381px" />
  <source width="381" data-srcset="

    /content/resized/2020/09/Understanding-BGP-MED-320.png 320w, 

 /content/uploads/2020/09/Understanding-BGP-MED.png 381w" sizes="381px" />
  <img src="//:0" data-src="/content/uploads/2020/09/Understanding-BGP-MED.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Multi-Exit Discriminator (MED) suggests how traffic should enter an ASN. Path with lower MED value are preferred. " />
</picture>
</a>



  <figcaption>Figure 3: Multi-Exit Discriminator (MED) suggests how traffic should enter an ASN. Path with lower MED value are preferred.
</figcaption>

</figure>

<p>When using AWS you will encounter MED when using a BGP-based Site-to-Site (IPSec) VPN connection while using a Virtual Private Gateway (VGW). In this case only one of the two tunnels is used by AWS to actively send traffic from the VPC to the Customer Gateway (CGW). As AWS customers very frequently leverage Firewall devices as Customer Gateway (CGW) devices and not L3 routers, asymmetric traffic might cause issues with stateful firewall rules. To prevent these issues, AWS indicates the active VPN tunnel through MED, thereby encouraging customers to use that same tunnel for return traffic.</p>

<p>You can see below that the IPSec tunnel with the next hop address <em>169.254.63.25</em> has a lower MED - displayed as Metric. Therefore this is the active tunnel within the connection.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSR1000V#sh ip bgp
BGP table version is 292, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal,
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter,
              x best-external, a additional-path, c RIB-compressed,
              t secondary path, L long-lived-stale,
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
      0.0.0.0          0.0.0.0                                0 i
 *&gt;   10.0.1.0/24      0.0.0.0                  0         32768 i
 *&gt;   10.0.16.0/24     0.0.0.0                  0         32768 i
 *&gt;   172.16.0.0/24    169.254.63.25          100             0 64512 i
 *                     169.254.39.225         200             0 64512 i
</code></pre></div></div>

<h2 id="traffic-engineering-example">Traffic engineering example</h2>

<p>If you’re not using stateful rules on your CGW, you might be tempted to override the MED value with a Local_Pref to force return traffic through the standby tunnel and thereby increasing the overall throughput. While doing this you might hope that now one tunnel - serving traffic from AWS VPC to on-premises - will provide you a throughput of ~ 1.25 Gbps, while the other tunnel - serving traffic from on-premises to the AWS VPC - will provide you an additional throughput of ~1.25 Gbps. The result should be an increased thoughput at ~ 2.5 Gbps.</p>

<p>This train of thought shows that you understood the fundamental principles of BGP and how to use them to influence traffic. Congratulation!</p>

<p>Unfortunately the AWS Site-to-Site (IPSec) VPN specific throughput limitation of ~ 1.25 Gbps is per connection and not per tunnel as the VGW is the forcing element. Therefore this approach will not yield the desired results.</p>

<h1 id="best-path-selectiom-algorithm-relaxation">Best Path selectiom algorithm relaxation</h1>

<p>Various router platforms offer different sets if capabilities to relax the rules around the BGP best path selection algorithm. While by default e.g. MED are only considered across path with the same neighboring ASN, the Cisco IOS command <em>bgp always-compare-med</em> ignores the ASN when considering MEDs. We saw in the previous blog post <a href="https://www.edge-cloud.net/2019/08/16/aws-dxgw-with-ipsec-vpn-backup/#multi-exit-discriminator-med">AWS Transit Gateway with Direct Connect Gateway and Site-to-Site (IPSec) VPN Backup</a> how this can used in the case of AWS.</p>

<h1 id="bgp-multipath">BGP Multipath</h1>

<p>With regards to what we learned in the <a href="https://www.edge-cloud.net/2020/09/18/understanding-routing/">previous post</a> about route tables, it is important to understand that only the best path is installed in the route table. Only if the BGP best path selection algorithm results in a “tie”, more than one route can be installed into the route table.</p>

<p>This is called BGP Multipath and it is independent of whether the underlying route table has <a href="https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing">Equal-cost multi-path routing (ECMP)</a> capabilities. In other words: To have full ECMP capability on a BGP enabled router, BGP needs to deliver parallel path to the routing table and the router needs to make use of them.</p>

<p>Therefore if we want to use ECMP with prefixes learned over BGP, we have to enforce such a “tie”. This means we need to ensure the following BGP attributes are kept same on each paths:</p>
<ul>
  <li>Weight</li>
  <li>Local Preference</li>
  <li>AS Path (both AS number and AS path length)</li>
  <li>Origin code</li>
  <li>MED</li>
  <li>IGP metric</li>
</ul>

<p>Various routing platforms offer ways to relax some of the attributes as tie breaker. As an example, the Cisco IOS command <em>bgp bestpath as-path multipath-relax</em> will ignore the actual AS numbers and only consider the AS path length. This allows ECMP across multiple upstream provider.</p>

<h1 id="summary">Summary</h1>

<p>Today’s blog post builds on what you’ve learned in the previous blog post on <a href="https://www.edge-cloud.net/2020/09/18/understanding-routing/">Better understanding IP Routing</a>. It provides an introduction into the BGP Best Path Selection Algorithm and how to use some of the valued to influence traffic flowing into (ingress) and out of (egress) your ASN.</p>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="BGP" /><category term="Network" /><summary type="html"><![CDATA[Primer to better understanding BGP]]></summary></entry><entry><title type="html">Better understanding IP Routing</title><link href="https://www.edge-cloud.net/2020/09/18/understanding-routing/" rel="alternate" type="text/html" title="Better understanding IP Routing" /><published>2020-09-18T00:00:00-07:00</published><updated>2020-09-18T00:00:00-07:00</updated><id>https://www.edge-cloud.net/2020/09/18/understanding-routing</id><content type="html" xml:base="https://www.edge-cloud.net/2020/09/18/understanding-routing/"><![CDATA[<p>Today we will look at some of the fundamental principles of IP routing. While these principles and concepts are generic, we will use examples based on AWS networking.</p>

<p>This blog post is not intended to be an all encompassing primer on IP routing. Instead I’ve seen numerous people confused by some of these principles and concepts while either designing networks or troubleshooting them. Therefore it appears to be a good idea to highlight and explain them explicitly.</p>

<p>In a future related blog post we will look at BGP routing in more detail.</p>

<p class="notice--info">Please keep in mind that we will be using AWS VPCs and TGWs to illustrate routing principles. The resulting AWS networking designs are therefore used for illustration purposes and are not suited or recommended for production deployments.</p>

<h1 id="routing">Routing</h1>

<p><a href="https://en.wikipedia.org/wiki/Routing">Routing</a> and more specifically here, <a href="https://en.wikipedia.org/wiki/IP_routing">IP routing</a>, deals with selecting a path for traffic in an IP network. Routing directs a “hop” within a network on how to  forward IP packets based on a <a href="https://en.wikipedia.org/wiki/Routing_table">routing tables</a> and the destination IP address within the packet.</p>

<p>As we will see later, routing tables maintain information on how to reach various network destinations. Typically they are either configured manually (also known as “Static Routing”) or with the help of a routing protocol (e.g. BGP).</p>

<h2 id="hop-by-hop-routing">Hop-by-Hop Routing</h2>

<p>One of the most fundamental concepts to understand in IP routing is that the actual forwarding decision is made on a hop-by-hop basis. This means that within each hop of the network path, a router makes a forwarding decision based on the local route table. Image this to be like a board game, where at each step in the game it is decided where to go next. Neither the previous nor the next step have any influence on the local decision.</p>

<p>Taking AWS VPCs and <a href="https://aws.amazon.com/transit-gateway/?aws-transit-gateway-wn.sort-by=item.additionalFields.postDateTime&amp;aws-transit-gateway-wn.sort-order=desc">Transit Gateways (TGWs)</a> as an example, we can quickly understand how this hop-by-hop decision making plays out, while looking at the routing tables of the VPCs and TGWs (See Figure 1).</p>

<figure class="">








<a href="/content/uploads/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop.png" title="Figure 1: IP Hop-by-Hop routing with VPCs and multiple Transit Gateways (TGW) " class="image-popup">
<picture>
  <source width="871" type="image/webp" data-srcset="

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-320.webp 320w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-384.webp 384w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-512.webp 512w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-683.webp 683w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-800.webp 800w, 

 /content/uploads/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop.webp 871w" sizes="871px" />
  <source width="871" data-srcset="

    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-320.png 320w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-384.png 384w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-512.png 512w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-683.png 683w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop-800.png 800w, 

 /content/uploads/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop.png 871w" sizes="871px" />
  <img src="//:0" data-src="/content/uploads/2020/09/Understanding-Routing-and-BGP-Hop-by-Hop.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: IP Hop-by-Hop routing with VPCs and multiple Transit Gateways (TGW) " />
</picture>
</a>



  <figcaption>Figure 1: IP Hop-by-Hop routing with VPCs and multiple Transit Gateways (TGW)
</figcaption>

</figure>

<p>Traffic from an EC2 instance in VPC 1 wanting to reach another EC2 instance in VPC 2 will have to follow this hop-by-hop process through the five routing tables involved here. What do you think? Will traffic from VPC 1 reach VPC 2? Or is there a mistake in the route tables?</p>

<p>Let’s look at each hop, step-by-step:</p>
<ul>
  <li><strong>VPC 1:</strong> Traffic for destinations within VPC 2’s CIDR of 10.2.0.0/16 are send to the TGW 1 over the VPC attachment.</li>
  <li><strong>TGW 1:</strong> Inspecting the route table of TGW 1, we can see that traffic for 10.2.0.0/16 is send via a TGW peering to TGW 2.</li>
  <li><strong>TGW 2:</strong> Looking at the route table of TGW 2, we can also find an entry for the destination of 10.2.0.0/16. It specifies that traffic should be send via another TGW peering to TGW 3.</li>
  <li><strong>TGW 3:</strong> At this point our traffic has already made it into the correct AWS regions. Let’s see what happens next: The route table of TGW 3 indicates that traffic for 10.2.0.0/16 will be forwarded to VPC 2.</li>
  <li><strong>VPC 2:</strong> Last but not least, the route table of VPC 2 shows that traffic for the locally used CIDR 10.2.0.0/16 remains within the VPC and is delivered to the corresponding EC2 instance.</li>
</ul>

<p>But what about the return traffic from VPC 2 to VPC 1? Read on to see how another important principle of IP routing plays a role here.</p>

<h2 id="directional">Directional</h2>

<p>Another important principle of IP routing, effectively caused by the hop-by-hop decision making behavior is that path determination is directional. Looking back at the provided example in the previous section (See Figure 1), we only validated that traffic from VPC 1 can reach VPC 2. But we did not validate any information on whether traffic from VPC 2 can reach VPC 1.</p>

<p>I leave it up to you as an exercise to determine if the route tables across the VPCs and TGWs are setup correctly to allow return traffic and thereby enable bidirectional communication. Comment below in case you find a mistake.</p>

<p>When designing route tables or troubleshooting network connectivity it’s always important that you look at traffic flows in both directions and plan or check route table independently for both directions.
Also when talking with co-workers, customer, support staff, or anyone alike it is also important that you indicate the direction of the traffic flow that you are referring to.</p>

<h3 id="asymmetric-routing">Asymmetric Routing</h3>

<p>What’s even more interesting is that the directional nature of IP forwarding can lead to asymmetric traffic flows. But there is nothing wrong about asymmetric traffic flows and the majority of the Internet relies on it while exchanging traffic between <a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">ASNs</a> via Peering or Transit. Think of asymmetric IP traffic flow as a hiking trail loop (See Figure 2). Such hiking trails are often more fascinating than an out-and-return path as you get to see a different set of landscape, plants and animals on the way back as compared to the way out.</p>

<figure class="">








<a href="/content/uploads/2020/09/understanding-routing-and-bgp-trail-map.jpg" title="Figure 2: Asymmetric routing is like a hiking-trail loop. " class="image-popup">
<picture>
  <source width="800" type="image/webp" data-srcset="

    
    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-320.webp 320w, 

    
    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-384.webp 384w, 

    
    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-512.webp 512w, 

    
    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-683.webp 683w, 

 /content/uploads/2020/09/understanding-routing-and-bgp-trail-map.webp 800w" sizes="800px" />
  <source width="800" data-srcset="

    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-320.jpg 320w, 

    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-384.jpg 384w, 

    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-512.jpg 512w, 

    /content/resized/2020/09/understanding-routing-and-bgp-trail-map-683.jpg 683w, 

 /content/uploads/2020/09/understanding-routing-and-bgp-trail-map.jpg 800w" sizes="800px" />
  <img src="//:0" data-src="/content/uploads/2020/09/understanding-routing-and-bgp-trail-map.jpg" class="blur-up lazyautosizes lazyload" alt="Figure 2: Asymmetric routing is like a hiking-trail loop. " />
</picture>
</a>



  <figcaption>Figure 2: Asymmetric routing is like a hiking-trail loop.
</figcaption>

</figure>

<p>And as long as you make the correct decision at your “routing hops” - aka. a trail fork - you will return to your trail head as well.</p>

<p>Let’s extend the above example using AWS VPCs and TGWs to showcase asymmetric routing. For this we add another TGW and two more TGW peering connections along with changes to the route table (See Figure 3).</p>

<figure class="">








<a href="/content/uploads/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing.png" title="Figure 3: Asymmetric routing with VPCs and multiple Transit Gateways (TGW) " class="image-popup">
<picture>
  <source width="871" type="image/webp" data-srcset="

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-320.webp 320w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-384.webp 384w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-512.webp 512w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-683.webp 683w, 

    
    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-800.webp 800w, 

 /content/uploads/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing.webp 871w" sizes="871px" />
  <source width="871" data-srcset="

    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-320.png 320w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-384.png 384w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-512.png 512w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-683.png 683w, 

    /content/resized/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing-800.png 800w, 

 /content/uploads/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing.png 871w" sizes="871px" />
  <img src="//:0" data-src="/content/uploads/2020/09/Understanding-Routing-and-BGP-Asymmetric-Routing.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Asymmetric routing with VPCs and multiple Transit Gateways (TGW) " />
</picture>
</a>



  <figcaption>Figure 3: Asymmetric routing with VPCs and multiple Transit Gateways (TGW)
</figcaption>

</figure>

<p>Now, if you follow the path of traffic from VPC 1 to VPC 2, you’ll notice that nothing has changed. Traffic still traverses TGW 1, TGW 2, and TGW 3 on the way to VPC 2. But at the same time look at traffic from VPC 2 to VPC 1. What do you notice?
Looking at the route tables of the TGWs you should notice that traffic  on the return path from VPC 2 to VPC 1 will traverse TGW 3, TGW 4, and TGW 1, thereby creating and asymmetric path.</p>

<p>This asymmetric traffic flow is depicted with the green arrows.</p>

<h2 id="route-tables">Route Tables</h2>

<p>Next we will look at route tables in a bit more detail. Being able to read and understand route tables, will help you understand the routing decision of the hops within each path.</p>

<p>The most simple route tables have already been depicted in Figure 1 and Figure 3. These routes show a simple mapping between the destination CIDR - also called prefix or network - and the next hop.</p>

<p>Translated into a route table on a Cisco device this might look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSR1000V-01#sh ip bgp
BGP table version is 297, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal,
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter,
              x best-external, a additional-path, c RIB-compressed,
              t secondary path, L long-lived-stale,
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
      0.0.0.0          0.0.0.0                                0 i
 *&gt;   10.0.1.0/24      0.0.0.0                  0         32768 i
 *&gt;   10.0.16.0/24     0.0.0.0                  0         32768 i
 *&gt;   10.1.0.0/16      169.254.15.221         100             0 64512 i
</code></pre></div></div>

<p>Focus on the last line, which effectively translates into: Packets for the prefix “10.1.0.0/16” should be send to the next hop with the IP address of “169.254.15.221”.</p>

<h3 id="longest-prefix-match">Longest prefix match</h3>

<p>After this let’s look at <a href="https://en.wikipedia.org/wiki/Longest_prefix_match">longest prefix match</a>, sometimes also referred to as “more specific routing”. This algorithm specifies which entry to be chosen from the IP routing table in case of destination addresses matching more than one entry. For IP routing the most specific of the matching table entries — the one with the longest subnet mask — is called the longest prefix match and is the one chosen.</p>

<p>Consider the below routing table on a Cisco device as an example and especially focus on the last five lines:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSR1000V-01#sh ip bgp
BGP table version is 297, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal,
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter,
              x best-external, a additional-path, c RIB-compressed,
              t secondary path, L long-lived-stale,
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
      0.0.0.0          0.0.0.0                                0 i
 *&gt;   10.0.1.0/24      0.0.0.0                  0         32768 i
 *&gt;   10.0.16.0/24     0.0.0.0                  0         32768 i
 *&gt;   10.1.0.0/16      169.254.15.221         100             0 64512 i
 *&gt;   10.1.1.0/24      169.254.16.222         100             0 64513 i
 *&gt;   10.1.2.0/24      169.254.17.223         100             0 64514 i
 *&gt;   10.1.3.0/24      169.254.18.224         100             0 64515 i
 *&gt;   10.1.4.0/24      169.254.19.225         100             0 64516 i
</code></pre></div></div>

<p>Here we can see that the destination IP address of “10.1.1.1” would match both the entry for “10.1.0.0/16”, as well as the entry for “10.1.1.0/24”. As the entry for “10.1.1.0/24” has a longer subnet mask - it is more specific - and therefore the chosen entry. With that this entry would be chosen and matching traffic send to 169.254.16.222 as the next hop.</p>

<h3 id="equal-cost-multipath-ecmp">Equal Cost Multipath (ECMP)</h3>

<p>Usually with IP forwarding there is one egress or outbound path per hop for a given destination IP. This rule can be softened via a routing strategy called <a href="https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing">Equal-cost multi-path routing (ECMP)</a>. With ECMP, packet forwarding to a single destination IP can occur over multiple “best path”.</p>

<p>Again, let’s have a look at an example and consider the below routing table on a Cisco router, especially the last two lines:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSR1000V#sh ip bgp
BGP table version is 297, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal,
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter,
              x best-external, a additional-path, c RIB-compressed,
              t secondary path, L long-lived-stale,
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
      0.0.0.0          0.0.0.0                                0 i
 *&gt;   10.0.1.0/24      0.0.0.0                  0         32768 i
 *&gt;   10.0.16.0/24     0.0.0.0                  0         32768 i
 *m   10.0.255.0/24    169.254.13.253         100             0 64512 i
 *&gt;                    169.254.15.221         100             0 64512 i
</code></pre></div></div>

<p>In this case we can see that we have a multipath route for the destination prefix of “10.0.255.0/24”, where both “169.254.13.253” and “169.254.15.221” are considered as the next best hop. In this case the router device will randomly send out traffic for this destination network over either next hop, while using a 5-tuple hash. A 5-tuple hash refers to a set of five different values that comprise a Transmission Control Protocol/Internet Protocol (TCP/IP) connection. It includes a source IP address/port number, destination IP address/port number and the protocol in use. Here with ECMP and 5-tuple hashing, packets belonging to the same 5-tuple travel to the same next hop, while packets from different 5-tuple may be send to another next hop.</p>

<h1 id="analogy">Analogy</h1>

<p>IP routing is actually very simple, once you realize that it is similar to hiking without a map:</p>

<figure class="">








<a href="/content/uploads/2020/09/bear-tree.jpg" title="Figure 4: IP routing is similar to hiking without a map. Here: Packet loss. (Photo courtesy of USDA Forest Service) " class="image-popup">
<picture>
  <source width="400" type="image/webp" data-srcset="

    
    /content/resized/2020/09/bear-tree-320.webp 320w, 

    
    /content/resized/2020/09/bear-tree-384.webp 384w, 

 /content/uploads/2020/09/bear-tree.webp 400w" sizes="400px" />
  <source width="400" data-srcset="

    /content/resized/2020/09/bear-tree-320.jpg 320w, 

    /content/resized/2020/09/bear-tree-384.jpg 384w, 

 /content/uploads/2020/09/bear-tree.jpg 400w" sizes="400px" />
  <img src="//:0" data-src="/content/uploads/2020/09/bear-tree.jpg" class="blur-up lazyautosizes lazyload" alt="Figure 4: IP routing is similar to hiking without a map. Here: Packet loss. (Photo courtesy of USDA Forest Service) " />
</picture>
</a>



  <figcaption>Figure 4: IP routing is similar to hiking without a map. Here: Packet loss. (Photo courtesy of USDA Forest Service)
</figcaption>

</figure>

<ul>
  <li>You start at the trailhead (source) and want to reach some target (destination).</li>
  <li>Move along the hiking trail to the next fork (router) and look at the signs (route table). Decide which trail (next hop) to chose, in order to reach your destination.
If the sign at the fork lacks an entry to the desired destination, you’re stuck forever and will eventually get eaten by a bear (dropped packet; See Figure 4).
    <ul>
      <li>If you pass the same fork more than once, you’re lost (packet looping) and will eventually run out of food (see below).</li>
      <li>If you pass by more than 64 forks you run out of food, starve and get eaten by a bear (TTL expired).</li>
      <li>If you made it to your desired target (destination), you succeeded. Good job!</li>
    </ul>
  </li>
  <li>Like IP routing, hiking is bidirectional: You want to get home again, don’t you? Therefore consider the return path as well and follow the above steps.</li>
</ul>

<h1 id="summary">Summary</h1>

<p>In today’s post we took a look at some of the fundamental principles of IP routing. A future post will look in more detail at  BGP Routing protocol concepts. Neither of these blog posts is intended to be an all encompassing primer on IP routing or BGP. Instead I’ve seen numerous people confused by some of these principles and concepts while either designing networks or troubleshooting them. Hopefully after reading through this post you feel a bit more confident to design, troubleshoot or just talk about IP networks.</p>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="BGP" /><category term="Network" /><summary type="html"><![CDATA[Look at fundamental principles of IP routing to better design and troubleshoot networks]]></summary></entry><entry><title type="html">AWS Site-to-Site VPN (IPSec) with IPv6</title><link href="https://www.edge-cloud.net/2020/09/11/aws-ipsec-vpn-ipv6/" rel="alternate" type="text/html" title="AWS Site-to-Site VPN (IPSec) with IPv6" /><published>2020-09-11T00:00:00-07:00</published><updated>2020-09-11T00:00:00-07:00</updated><id>https://www.edge-cloud.net/2020/09/11/aws-ipsec-vpn-ipv6</id><content type="html" xml:base="https://www.edge-cloud.net/2020/09/11/aws-ipsec-vpn-ipv6/"><![CDATA[<p>Recently AWS <a href="https://aws.amazon.com/about-aws/whats-new/2020/08/aws-site-to-site-vpn-supports-ipv6-traffic/">released support for IPv6 traffic over the AWS Site-to-Site VPN (IPSec)</a>. The <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/SetUpVPNConnections.html">setup of the AWS Site-to-Site VPN</a> has always been quite straight forward and thanks to the <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/SetUpVPNConnections.html#vpn-download-config">downloadable configuration files</a> at times even trivial.
With the introduction of IPv6 support this is unfortunately no longer the case. Therefore this blog post will guide you around some of the pitfalls of setting up an AWS Site-to-Site VPN with IPv6 support, hoping that they will eventually be removed and this post become unnecessary.</p>

<h1 id="constraints">Constraints</h1>

<p>A few <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/ipv4-ipv6.html">constraints apply</a> when using AWS Site-to-Site VPN (IPSec) with IPv6:</p>
<ul>
  <li>The outside tunnel IP addresses - which are the public non-RFC1918 addresses - still only support IPv4. You can only use IPv6 on the inside of the tunnel, in order to carry IPv6 traffic between your on-premises network and AWS.</li>
  <li>You have to use an <a href="https://aws.amazon.com/transit-gateway/">AWS Transit Gateway (TGW)</a> as the AWS termination of your VPN. Site-to-Site VPNs to a Virtual Private Gateways (VGW) do not support IPv6.</li>
  <li>You cannot retrofit existing Site-to-Site connections with IPv6, but need to create a new connection.</li>
  <li>A Site-to-Site VPN connection can only support IPv4, or IPv6. This means that if you need to carry both IPv4 and IPv6 traffic between AWS and on-premises you need to create two separate connections, one for IPv4 and one for IPv6 (See Figure 1).</li>
</ul>

<figure class="">








<a href="/content/uploads/2020/09/S2S-VPN-with-IPv6-1.png" title="Figure 1: AWS Site-to-Site VPN setup with IPv4 and IPv6 support. " class="image-popup">
<picture>
  <source width="901" type="image/webp" data-srcset="

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-1-320.webp 320w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-1-384.webp 384w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-1-512.webp 512w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-1-683.webp 683w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-1-800.webp 800w, 

 /content/uploads/2020/09/S2S-VPN-with-IPv6-1.webp 901w" sizes="901px" />
  <source width="901" data-srcset="

    /content/resized/2020/09/S2S-VPN-with-IPv6-1-320.png 320w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-1-384.png 384w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-1-512.png 512w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-1-683.png 683w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-1-800.png 800w, 

 /content/uploads/2020/09/S2S-VPN-with-IPv6-1.png 901w" sizes="901px" />
  <img src="//:0" data-src="/content/uploads/2020/09/S2S-VPN-with-IPv6-1.png" class="blur-up lazyautosizes lazyload" alt="Figure 1: AWS Site-to-Site VPN setup with IPv4 and IPv6 support. " />
</picture>
</a>



  <figcaption>Figure 1: AWS Site-to-Site VPN setup with IPv4 and IPv6 support.
</figcaption>

</figure>

<p>As each AWS Site-to-Site VPN connection consist of two tunnels, in the case of supporting IPv4/IPv6 Dualstack traffic you will therefore end up with a total of four tunnels, two for IPv4 traffic and two for IPv6 traffic.
Also note that this means you’ll be paying separately for the tunnel carrying the IPv4 traffic as well as for the tunnel carrying the IPv6 traffic.</p>

<h1 id="configuration">Configuration</h1>

<h2 id="aws-setup">AWS Setup</h2>

<p>The <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/SetUpVPNConnections.html#vpn-create-vpn-connection">creation of a Site-to-Site VPN connection</a> is straight forward and only differs from its IPv4 counterpart by setting the “Tunnel Inside IP version” to IPv6 instead of IPv4 (See Figure 2).</p>

<figure class="">








<a href="/content/uploads/2020/09/S2S-VPN-with-IPv6-2.png" title="Figure 2: Creating a new AWS Site-to-Site VPN with IPv6 support. " class="image-popup">
<picture>
  <source width="1061" type="image/webp" data-srcset="

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-320.webp 320w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-384.webp 384w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-512.webp 512w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-683.webp 683w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-800.webp 800w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-2-960.webp 960w, 

 /content/uploads/2020/09/S2S-VPN-with-IPv6-2.webp 1061w" sizes="1061px" />
  <source width="1061" data-srcset="

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-320.png 320w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-384.png 384w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-512.png 512w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-683.png 683w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-800.png 800w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-2-960.png 960w, 

 /content/uploads/2020/09/S2S-VPN-with-IPv6-2.png 1061w" sizes="1061px" />
  <img src="//:0" data-src="/content/uploads/2020/09/S2S-VPN-with-IPv6-2.png" class="blur-up lazyautosizes lazyload" alt="Figure 2: Creating a new AWS Site-to-Site VPN with IPv6 support. " />
</picture>
</a>



  <figcaption>Figure 2: Creating a new AWS Site-to-Site VPN with IPv6 support.
</figcaption>

</figure>

<p>The IPv6 enabled Site-to-Site VPN connection also supports defining the IPv6 addresses used within the tunnel yourself. If you want to make use of this capability you have to select a /126 IPv6 subent out of the fd00::/8 <a href="https://en.wikipedia.org/wiki/Unique_local_address">Unique local address</a> address range. This is useful to prevent IP address collisions across multiple tunnels. Although with IPv6 addresses, such a collision is much less likely than with IPv4.</p>

<h2 id="customer-side-configuration">Customer-side Configuration</h2>

<h3 id="basic-configuration-information">Basic configuration information</h3>

<p>When configuring the costumer-side of the solution, the challenges will start. Having a look at the Tunnel details for a newly created AWS Site-to-Site VPN with IPv6 support will yield some surprising results (See Figure 3).</p>

<figure class="">








<a href="/content/uploads/2020/09/S2S-VPN-with-IPv6-3.png" title="Figure 3: Tunnel details for AWS Site-to-Site VPN with IPv6 support. " class="image-popup">
<picture>
  <source type="image/webp" data-srcset="

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-320.webp 320w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-384.webp 384w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-512.webp 512w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-683.webp 683w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-800.webp 800w, 

    
    /content/resized/2020/09/S2S-VPN-with-IPv6-3-960.webp 960w, 

" sizes="1438px" />
  <source data-srcset="

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-320.png 320w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-384.png 384w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-512.png 512w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-683.png 683w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-800.png 800w, 

    /content/resized/2020/09/S2S-VPN-with-IPv6-3-960.png 960w, 

" sizes="1438px" />
  <img src="//:0" data-src="/content/uploads/2020/09/S2S-VPN-with-IPv6-3.png" class="blur-up lazyautosizes lazyload" alt="Figure 3: Tunnel details for AWS Site-to-Site VPN with IPv6 support. " />
</picture>
</a>



  <figcaption>Figure 3: Tunnel details for AWS Site-to-Site VPN with IPv6 support.
</figcaption>

</figure>

<p>You’ll see that for both tunnels “Inside IPv4 CIDRs” from the 169.254.0.0/16 <a href="https://en.wikipedia.org/wiki/Link-local_address">Link-local address</a> range will be shown. As mentioned previously an AWS Site-to-Site connection - and thereby its tunnels - only supports either IPv4 or IPv6. As this is an IPv6 enabled tunnel, the displayed Inner IPv4 CIDRs are irrelevant from a tunnel transport perspective. You can completely ignore them when configuring the tunnel itself.
The provided information does come in handy with regards to the BGP router ID. In the above case, with Tunnel 1 the AWS side of the BGP session uses the BGP router ID of 169.254.123.<strong>89</strong>. To prevent collisions you should therefore not use the same BGP router ID on your side.</p>

<p>Next you will notice that for the “Inside IPv6 CIDRs” the addresses are provided with a /128 netmask - which is the IPv6 equivalent of /32 and therefore a “host-only” netmask. This netmask therefore only contains a single IP address. Yet the <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/ipv4-ipv6.html">documentation clearly calls out</a> that these “Inside IPv6 CIDRs” should be a /126 IPv6 CIDR block, which includes 4 IPv6 addresses. A /126 IPv6 CIDR is the equivalent of a /30 IPv4 CIDR.
Also the provided IPv6 address from the fd00::/8 <a href="https://en.wikipedia.org/wiki/Unique_local_address">Unique local address</a> address range ends in an odd number and is therefore not a network address, which always end in even numbers.
Turns out that the displayed IPv6 address is actually the AWS side of the inner connection.</p>

<p>So with the value of “fdbe:1a26:45b0:4631:ca60:3307:371b:631<strong>5</strong>/128” displayed in the provided example, the relevant IPv6 information would be:</p>
<ul>
  <li>Subnet (aka CIDR): fdbe:1a26:45b0:4631:ca60:3307:371b:631<strong>4</strong>/12<strong>6</strong></li>
  <li>AWS-side interface address: fdbe:1a26:45b0:4631:ca60:3307:371b:631<strong>5</strong>/12<strong>6</strong></li>
  <li>Customer-side address: fdbe:1a26:45b0:4631:ca60:3307:371b:631<strong>6</strong>/12<strong>6</strong></li>
</ul>

<p>You should notice the pattern for constructing the necessary IPv6 information:</p>
<ul>
  <li>Subnet (aka CIDR): Provided IPv6 address - 1</li>
  <li>AWS-side interface address: Provided IPv6 address</li>
  <li>Customer-side address: Provided IPv6 address + 1</li>
</ul>

<p>Just keep in mind that IPv6 addresses use hex digits, which start with 0,1,2,.. then continue with ..,8,9,A,B,.. and end with ..,E,F.</p>

<p>You can double check your conversion math knowing that the used netmask is a /128, allowing IPv6 subnets with 4 addresses. Therefore 4 different combinations of trailing IPv6 digits exist:</p>
<ul>
  <li>Subnet (aka CIDR): Must always end in 0,4,8,C</li>
  <li>AWS-side interface address: Must always end in 1,5,9,D</li>
  <li>Customer-side address: Must always end in 2,6,A,E</li>
</ul>

<h3 id="configuration-download">Configuration download</h3>

<p>The next challenge you will notice is that when downloading the <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/SetUpVPNConnections.html#vpn-download-config">downloadable configuration files</a> from the AWS Console, it does not include any IPv6 address information. Instead for the inner address it includes IPv4 address information that are irrelevant as already pointed out.</p>

<p>Nevertheless you can leverage the downloadable configuration file for the Internet Key Exchange (IKE) and IPSec Configuration of your tunnels. These two sections within the file can be used without any changes, unless you diverted with your IKE or IPSec settings from the default values. Because these downloadable configuration files are only baseline examples that assume default values.</p>

<h3 id="tunnel-interface-configuration">Tunnel Interface Configuration</h3>

<p>With that the Tunnel Interface Configuration has to be adapted from IPv4 to IPv6. Using a Cisco IOS configuration as an example, the downloadable configuration file will provide the following Interface Configuration.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface Tunnel1
  ip address 169.254.123.90 255.255.255.252
  ip virtual-reassembly
  tunnel source 198.51.100.123
  tunnel destination 54.68.62.136
  tunnel mode ipsec ipv4
  tunnel protection ipsec profile ipsec-vpn-0b1561f60da62e5eb-0
  ip tcp adjust-mss 1379

</code></pre></div></div>

<p>Within this configuration we have to replace the inner IPv4 address with an IPv6 address and also specify that IPv6 should be used within the inside of the tunnel. The outer IP address remains to be an IPv4 address. The resulting corrected configuration using the IPv6 address as outlined in the previous section becomes as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface Tunnel1
 no ip address
 ip virtual-reassembly
 ipv6 address FDBE:1A26:45B0:4631:CA60:3307:371B:6316/126
 tunnel source 198.51.100.123
 tunnel destination 54.68.62.136
 tunnel mode ipsec ipv4 v6-overlay
 tunnel protection ipsec profile ipsec-vpn-0b1561f60da62e5eb-0
 ip tcp adjust-mss 1379

</code></pre></div></div>

<h3 id="border-gateway-protocol-bgp-configuration">Border Gateway Protocol (BGP) Configuration</h3>

<p>Next the Border Gateway Protocol (BGP) Configuration also needs to be adapted, replacing the IPv4 configuration with a corresponding IPv6 configuration.</p>

<p>The downloadable configuration will provide the following BGP configuration.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>router bgp 65000
  neighbor 169.254.123.89 remote-as 64512
  neighbor 169.254.123.89 activate
  neighbor 169.254.123.89 timers 10 30 30
  address-family ipv4 unicast
    neighbor 169.254.123.89 remote-as 64512
    neighbor 169.254.123.89 timers 10 30 30
    neighbor 169.254.123.89 activate
    neighbor 169.254.123.89 soft-reconfiguration inbound
</code></pre></div></div>

<p>As we want to run BGP over the inner IPv6 connection, we again have to replace all IPv4 configuration items with the corresponding IPv6 addresses.
The result will look as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>router bgp 65000
  neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 remote-as 64512
  neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 activate
  neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 timers 10 30 30
  address-family ipv6 unicast
    neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 remote-as 64512
    neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 timers 10 30 30
    neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 activate
    neighbor FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1 soft-reconfiguration inbound
</code></pre></div></div>

<p>Here you effectively have to replace the unusable IPv4 address for the neighbor with the correct IPv6 address of that neighbor and change the address-family section from IPv4 to IPv6.</p>

<h1 id="validation">Validation</h1>

<p>As a final step, we can validate that IPv6 routes are being learned from the TGW via the Site-to-Site VPN.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSR1000V-01#sh ipv6 route bgp
IPv6 Routing Table - default - 13 entries
Codes: C - Connected, L - Local, S - Static, U - Per-user Static route
       B - BGP, R - RIP, H - NHRP, I1 - ISIS L1
       I2 - ISIS L2, IA - ISIS interarea, IS - ISIS summary, D - EIGRP
       EX - EIGRP external, ND - ND Default, NDp - ND Prefix, DCE - Destination
       NDr - Redirect, RL - RPL, O - OSPF Intra, OI - OSPF Inter
       OE1 - OSPF ext 1, OE2 - OSPF ext 2, ON1 - OSPF NSSA ext 1
       ON2 - OSPF NSSA ext 2, la - LISP alt, lr - LISP site-registrations
       ld - LISP dyn-eid, lA - LISP away, le - LISP extranet-policy
       lp - LISP publications, a - Application, m - OMP
B   2600:1234::/64 [20/100]
     via FDBE:1A26:45B0:4631:CA60:3307:371B:6315
     via FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1
B   2600:1A14:5DE:DB00::/56 [20/100]
     via FDBE:1A26:45B0:4631:CA60:3307:371B:6315
     via FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1
B   2600:1A16:807:3A00::/56 [20/100]
     via FDBE:1A26:45B0:4631:CA60:3307:371B:6315
     via FDB0:C9AB:9EC7:3934:EE0:9873:54BC:C8F1

</code></pre></div></div>

<p>In this case we can see that a total of three prefixes is learned, whereas the first prefix is originated on the TGW via a <a href="https://www.edge-cloud.net/2019/08/07/bgp-route-summary-with-tgw/">summary route</a>, while the other two prefixes correspond to VPCs.</p>

<h1 id="summary">Summary</h1>

<p>This blog post guided you around some of the pitfalls when setting up an IPv6 capable AWS Site-to-Site VPN connection. It covered some of the rather cosmetic imperfections within the AWS Console around unusable IPv4 addresses, as well as generating a working Customer Gateway (CGW) configuration based on the downloadable configuration files.</p>]]></content><author><name>Christian Elsen</name></author><category term="EdgeCloud" /><category term="AWS" /><category term="Network" /><category term="IPv6" /><summary type="html"><![CDATA[How to setup the AWS Site-to-Site VPN (IPSec) with IPv6]]></summary></entry></feed>